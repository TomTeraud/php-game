services:
  # Nginx Web Server - Acts as a reverse proxy
  web:
    image: nginx:latest
    ports:
      - "80:80" # Maps host port 80 to container port 80
    volumes:
      # Mounts the application code (specifically the public directory if Nginx serves static files directly,
      # or the whole app if PHP-FPM needs access via a shared volume with Nginx for some reason,
      # though typically Nginx only needs the Nginx config and to proxy to PHP-FPM)
      - ./app:/var/www/html
      # Mounts the Nginx configuration file
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro # :ro for read-only is good practice
    depends_on:
      # Ensures 'app' and 'websocket' services are started before 'web'
      # This helps Nginx find them for proxying.
      - app
      - websocket
    restart: unless-stopped # Optional: restart policy

  # PHP Application Server (PHP-FPM)
  app:
    build:
      dockerfile: ./php/Dockerfile
      target: "${BUILD_TARGET:-app_prod}" # Allows for different build targets (dev vs prod)
    volumes:
      - ./app:/var/www/html
      - ./app/vendor:/var/www/html/vendor # This maps your local ./app/vendor
    working_dir: /var/www/html # Sets the default working directory for commands
    environment:
      # Environment variables for database and Redis connection
      MYSQL_HOST: db
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      REDIS_HOST: cache
      REDIS_PORT: ${REDIS_PORT}
      # Add other necessary environment variables
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
    extra_hosts:
      # Allows the container to resolve 'host.docker.internal' to the host gateway
      # Useful for Xdebug or connecting back to services running on the host machine.
      - "host.docker.internal:host-gateway"
    ports:
      # Exposes port 8080 on the host, mapping to port 8080 in the container.
      # This might be for direct access during development or for a specific service.
      # Note: PHP-FPM typically listens on port 9000 by default, which Nginx proxies to.
      # This 8080 port might be for something else or if you've configured FPM differently.
      - "8080:8080"
    depends_on:
      # Ensures 'db' and 'cache' services are started before 'app'
      - db
      - cache
    restart: unless-stopped # Optional: restart policy

  # WebSocket Server (PHP Ratchet/Swoole etc.)
  websocket:
    build:
      dockerfile: ./php/Dockerfile # Can use the same Dockerfile as 'app' or a dedicated one
      target: "${BUILD_TARGET:-app_prod}"
    volumes:
      - ./app:/var/www/html
      - ./app/vendor:/var/www/html/vendor
    working_dir: /var/www/html
    command: ["php", "bin/websocket-server.php"] # Command to start the WebSocket server
    # 'expose' can be used for inter-container communication if not mapping to host.
    # Nginx will connect to this service on its internal port (e.g., 9001).
    # expose:
    #   - "9001"
    environment:
      # Environment variables, e.g., for Redis connection if used for broadcasting
      REDIS_HOST: cache
      REDIS_PORT: ${REDIS_PORT}
      # Add other necessary environment variables (e.g., DB credentials if needed directly)
      MYSQL_HOST: db
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
    extra_hosts:
      - "host.docker.internal:host-gateway"
    depends_on:
      # Ensures 'cache' and 'db' are started if the WebSocket server needs them at startup
      - cache
      - db
    restart: unless-stopped # Optional: restart policy

  # MySQL Database Server
  db:
    image: mysql:9.2 # Using a specific version is good practice
    volumes:
      # Mounts a named volume for persistent database storage
      - mysqldata:/var/lib/mysql
    ports:
      # Maps host port 3306 to container port 3306 for external access (e.g., MySQL Workbench)
      - "3306:3306"
    restart: unless-stopped # Ensures the database restarts if it stops, unless manually stopped
    environment:
      # Database credentials and setup
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # Use MYSQL_ROOT_PASSWORD for mysql >= 8.0
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    # Healthcheck is a good addition for database services
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "db", "-u${MYSQL_USER}", "-p${MYSQL_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s # Give it time to initialize

  # phpMyAdmin - Web interface for MySQL database administration
  phpmyadmin:
    image: phpmyadmin:latest
    restart: always # Or unless-stopped
    ports:
      # Maps host port 8082 to container port 80 (Apache inside phpMyAdmin container)
      - "8082:80"
    environment:
      PMA_HOST: db # Tells phpMyAdmin to connect to the 'db' service
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # For root login if needed
      # You might also set PMA_USER and PMA_PASSWORD for a specific user
    depends_on:
      # Ensures 'db' service is started before phpMyAdmin
      - db

  # Redis Cache Server
  cache:
    image: redis:latest # Or a specific version like redis:7.2-alpine
    restart: unless-stopped # Optional: restart policy
    # ports: # Uncomment if you need direct external access to Redis (usually not needed)
    #   - "6379:6379"
    healthcheck: # Basic healthcheck for Redis
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

# Named volumes for persistent data
volumes:
  mysqldata: # Stores MySQL data
  # vendor:    # Stores Composer dependencies
