server {
    # Listens on port 80 for incoming connections
    listen 80;
    # The server name (use localhost for local development)
    server_name localhost;
    # Sets the root directory for requests. Adjust if your public folder is different.
    root /var/www/html/public;
    # Specifies the default file to serve if a directory is requested
    index index.php index.html;

    # Handles general requests
    location / {
        # Tries to serve the requested file ($uri), then directory ($uri/),
        # otherwise falls back to the main PHP front controller (index.php)
        # passing the original query string.
        try_files $uri $uri/ /index.php?$query_string;
    }

    # Handles execution of PHP scripts
    location ~ \.php$ {
        # Security measure: Prevents direct access to PHP files if not routed through index.php
        try_files $uri =404;

        # (Optional but common) Splits the request URI into the script name and path info
        # Useful for frameworks that use PATH_INFO routing.
        fastcgi_split_path_info ^(.+\.php)(/.+)$;

        # Passes the request to the PHP-FPM service.
        # 'app' is the service name defined in your docker-compose.yml.
        # '9000' is the default port PHP-FPM listens on. Verify this matches your PHP container setup.
        fastcgi_pass   app:9000;
        # Sets the default script name if the request URI ends with a slash
        fastcgi_index  index.php;

        # Includes standard FastCGI parameters defined in fastcgi_params file
        include        fastcgi_params;

        # Sets the SCRIPT_FILENAME parameter, which tells PHP-FPM which script to execute.
        # $document_root refers to the 'root' directive defined above (/var/www/html/public).
        fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;
        # Sets the PATH_INFO parameter, if available from fastcgi_split_path_info
        fastcgi_param  PATH_INFO $fastcgi_path_info;
    }

    # Optional: Configures caching for static assets to improve performance
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        # Tries to serve the static file directly, returns 404 if not found
        try_files $uri =404;
        # Sets browser cache expiration time (e.g., 1 month)
        expires 1M;
        # Sets Cache-Control header to public
        add_header Cache-Control "public";
    }

    # === WebSocket Proxy Configuration ===
    # Handles requests specifically for the /ws/ path (adjust path if needed)
    location /ws/ {
        # *** CRITICAL CHANGE ***
        # Proxies the request to your dedicated 'websocket' service.
        # Replace 'websocket' if your service has a different name in docker-compose.yml.
        # Replace '9001' with the actual internal port your WebSocket server listens on inside its container.
        proxy_pass http://websocket:9001;

        # === Headers required for the WebSocket protocol upgrade ===
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade; # Passes the Upgrade header from the client
        proxy_set_header Connection "Upgrade"; # Tells the backend to upgrade the connection
        proxy_set_header Host $host;           # Passes the original Host header

        # === Headers to pass client IP information (Recommended) ===
        proxy_set_header X-Real-IP $remote_addr; # Passes the real client IP address
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; # List of IPs if behind multiple proxies
        proxy_set_header X-Forwarded-Proto $scheme; # Indicates original protocol (http or https)

        # === Timeouts for persistent connections (Important!) ===
        # Increase timeouts significantly to prevent Nginx from closing idle WebSocket connections.
        # 86400s = 24 hours. Adjust based on your application needs.
        proxy_read_timeout 86400s;
        proxy_send_timeout 86400s;

        # === Disable proxy buffering (Recommended for WebSockets) ===
        # Prevents Nginx from buffering responses, allowing real-time message flow.
        proxy_buffering off;
    }

    # Deny access to hidden files (like .htaccess, .git, .env) for security
    location ~ /\. {
        deny all;
    }
}
