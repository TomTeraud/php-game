# This file is a template for a production-like setup.
# For actual production, further considerations for security, logging,
# monitoring, and resource management are necessary.

services:
  # Nginx Web Server
  web:
    # In production, you might build a custom Nginx image with your config baked in,
    # or use the official image and still mount the config.
    # For this example, we'll assume a custom build or that the default.conf
    # is copied into the image by the Dockerfile specified.
    build:
      context: . # Assuming Dockerfile for Nginx might be in the root or ./nginx
      dockerfile: ./nginx/Dockerfile # Or your specific Nginx Dockerfile
    ports:
      - "80:80"
      # Consider adding "443:443" if you plan to use HTTPS in production
    volumes:
      # Only mount necessary configuration if not baked into the image.
      # Static assets might be served by Nginx and could be in a shared volume
      # or also baked into the Nginx image or app image.
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf:ro
      # Example for SSL certificates:
      # - /path/to/your/live/certs:/etc/nginx/certs:ro
    depends_on:
      - app
      - websocket
    restart: always

  # PHP Application Server (PHP-FPM)
  app:
    # In production, you'd use a pre-built image containing your application code.
    # This image would be built using a Dockerfile (e.g., ./php/Dockerfile with target app_prod)
    # and pushed to a registry.
    image: tomsterauds/php-composer:1.0 # Replace with your actual production image
    # build: # Or, if building directly here for a simpler setup:
    #   context: .
    #   dockerfile: ./php/Dockerfile
    #   target: app_prod # Ensure this target copies code and runs composer install
    environment:
      # These should be set via a secure method in production (e.g., Docker secrets, .env file not committed to repo)
      MYSQL_HOST: db
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      REDIS_HOST: cache
      REDIS_PORT: ${REDIS_PORT}
      # Add APP_ENV=production, APP_DEBUG=false etc.
    depends_on:
      - db
      - cache
    restart: always
    # No ports exposed directly to host if Nginx is the entry point.
    # No development volumes like ./app:/var/www/html

  # WebSocket Server
  websocket:
    # Similar to the 'app' service, use a pre-built image for production.
    # This image should contain your WebSocket server code.
    image: tomsterauds/php-composer:1.0 # Can be the same image as 'app' if structured correctly
    # build:
    #   context: .
    #   dockerfile: ./php/Dockerfile
    #   target: app_prod # Ensure this target includes WebSocket server and its startup command
    command: ["php", "bin/websocket-server.php"] # Ensure this path is correct in your image
    environment:
      REDIS_HOST: cache
      REDIS_PORT: ${REDIS_PORT}
      MYSQL_HOST: db # If needed for auth/data
      MYSQL_PORT: ${MYSQL_PORT}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
    depends_on:
      - cache
      - db
    restart: always
    # No ports exposed directly to host as Nginx proxies to it.

  # MySQL Database Server
  db:
    image: mysql:9.2
    volumes:
      - mysqldata:/var/lib/mysql # Use a named volume for persistent data
    restart: always # Changed from unless-stopped for more resilience
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD} # Ensure this is set securely
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
    # Consider adding healthcheck for db

  # phpMyAdmin (Consider if needed in production; often removed or secured)
  phpmyadmin:
    image: phpmyadmin:latest
    restart: always
    ports:
      # Be cautious exposing phpMyAdmin publicly in production.
      # If kept, ensure strong passwords and consider IP whitelisting or an auth proxy.
      - "8081:80" # Changed port to avoid conflict if you run dev and this "prod" locally
    environment:
      PMA_HOST: db
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    depends_on:
      - db

  # Redis Cache Server
  cache:
    image: redis:latest # Consider a specific version like redis:7-alpine
    restart: always
    # Consider adding a healthcheck for cache

# Named volumes for persistent data
volumes:
  mysqldata:
    # In production, you might configure external backup for this volume.
